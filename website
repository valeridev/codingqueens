<!DOCTYPE html>
<html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>hovertraileffect</title>
        <style>
            h1,
            h2 {

                background-image: linear-gradient(to bottom, rgb(255, 182, 193), rgb(152, 255, 152), rgb(230, 230, 250), rgb(135, 206, 250), rgb(255, 218, 185), rgb(200, 162, 200), rgb(255, 255, 160), rgb(255, 127, 80));
                -webkit-background-clip: text;
                color: transparent;
                text-align: center;
                font-size: 150px;


            }

            body {
                margin: 0;
                padding: 0;
                height: 100vh;
                background-color: white;
                margin: 0;
                display: flex;
                justify-content: center;
                align-items: center;
            }

            .center {
                text-align: center;
            }

            canvas#canvas {
                position: fixed;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
            }
        </style>
    </head>

    <body>
        <div class="center">
            <h1>Coming Soon</h1>
            <h2>@Coding Queens</h2>
        </div>
        <canvas id="canvas"></canvas>

        <script>
            const canvas = document.querySelector("#canvas");
            const ctx = canvas.getContext("2d");

            let w, h, balls = [];
            let mouse = {
                x: undefined,
                y: undefined
            }
            let rgb = [
                "rgb(255, 182, 193)",
                "rgb(152, 255, 152)",
                "rgb(230, 230, 250)",
                "rgb(135, 206, 250)",
                "rgb(255, 218, 185)",
                "rgb(200, 162, 200)",
                "rgb(255, 255, 160)",
                "rgb(255, 127, 80)"

            ]

            function init() {
                resizeReset();
                animationLoop();
            }

            function resizeReset() {
                w = canvas.width = window.innerWidth;
                h = canvas.height = window.innerHeight;
            }

            function animationLoop() {
                ctx.clearRect(0, 0, w, h);
                ctx.globalCompositeOperation = 'lighter';
                drawBalls();

                let temp = [];
                for (let i = 0; i < balls.length; i++) {
                    if (balls[i].time <= balls[i].ttl) {
                        temp.push(balls[i]);
                    }
                }
                balls = temp;

                requestAnimationFrame(animationLoop);
            }

            function drawBalls() {
                for (let i = 0; i < balls.length; i++) {
                    balls[i].update();
                    balls[i].draw();
                }
            }

            function mousemove(e) {
                mouse.x = e.x;
                mouse.y = e.y;

                for (let i = 0; i < 3; i++) {
                    balls.push(new Ball());
                }
            }

            function mouseout() {
                mouse.x = undefined;
                mouse.y = undefined;
            }

            function getRandomInt(min, max) {
                return Math.round(Math.random() * (max - min)) + min;
            }

            function easeOutQuart(x) {
                return 1 - Math.pow(1 - x, 4);
            }

            class Ball {
                constructor() {
                    this.start = {
                        x: mouse.x + getRandomInt(-20, 20),
                        y: mouse.y + getRandomInt(-20, 20),
                        size: getRandomInt(30, 40)
                    }
                    this.end = {
                        x: this.start.x + getRandomInt(-300, 300),
                        y: this.start.y + getRandomInt(-300, 300)
                    }

                    this.x = this.start.x;
                    this.y = this.start.y;
                    this.size = this.start.size;

                    this.style = rgb[getRandomInt(0, rgb.length - 1)];

                    this.time = 0;
                    this.ttl = 520;
                }
                draw() {
                    ctx.fillStyle = this.style;
                    ctx.beginPath();
                    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                    ctx.closePath();
                    ctx.fill();
                }
                update() {
                    if (this.time <= this.ttl) {
                        let progress = 1 - (this.ttl - this.time) / this.ttl;

                        this.size = this.start.size * (1 - easeOutQuart(progress));
                        this.x = this.x + (this.end.x - this.x) * 0.01;
                        this.y = this.y + (this.end.y - this.y) * 0.01;
                    }
                    this.time++;
                }
            }

            window.addEventListener("DOMContentLoaded", init);
            window.addEventListener("resize", resizeReset);
            window.addEventListener("mousemove", mousemove);
            window.addEventListener("mouseout", mouseout);
        </script>

    </body>

</html>
